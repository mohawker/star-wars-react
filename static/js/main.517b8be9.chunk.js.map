{"version":3,"sources":["assets/star-wars-logo.png","assets/BB8-loading.gif","assets/baby-yoda.gif","components/PeopleDetails.js","components/PeopleList.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PeopleDetails","props","state","loading","expanded","homeworld","species","films","vehicles","starships","toggle","bind","this","setState","vehiclesArray","vehiclesURL","peopleDetails","i","length","axios","get","then","res","push","data","name","catch","err","console","log","starshipsArray","starshipsURL","filmsArray","filmsURL","title","homeworldURL","speciesURL","getHomeworld","getSpecies","getFilms","getVehicles","getStarships","details","type","className","onClick","style","float","height","mass","hair_color","skin_color","eye_color","birth_year","gender","join","Component","PeopleList","map","item","key","id","marginTop","borderColor","opacity","Pagination","buttons","currentPage","pageButtonClick","lastPage","justifyContent","App","fetchData","index","results","count","src","Logo","alt","textAlign","marginBottom","Loading","Yoda","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.517b8be9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.0cf7e1d8.png\";","module.exports = __webpack_public_path__ + \"static/media/BB8-loading.d0bf0146.gif\";","module.exports = __webpack_public_path__ + \"static/media/baby-yoda.70528013.gif\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass PeopleDetails extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            expanded: false,\n            homeworld: null,\n            species: null,\n            films: [],\n            vehicles: [],\n            starships: [],\n        }\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({ expanded: !this.state.expanded });\n    }\n\n    getVehicles() {\n        var vehiclesArray = [];\n        const vehiclesURL = this.props.peopleDetails.vehicles;\n        for (var i = 0; i < vehiclesURL.length; i++){\n            axios\n            .get(vehiclesURL[i])\n            .then(res => {\n                vehiclesArray.push(res.data.name);\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        }\n        this.setState({vehicles: vehiclesArray})\n    }\n\n    getStarships() {\n        var starshipsArray = [];\n        const starshipsURL = this.props.peopleDetails.starships;\n        for (var i = 0; i < starshipsURL.length; i++){\n            axios\n            .get(starshipsURL[i])\n            .then(res => {\n                starshipsArray.push(res.data.name);\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        }\n        this.setState({starships: starshipsArray})\n    }\n\n    getFilms() {\n        var filmsArray = [];\n        const filmsURL = this.props.peopleDetails.films;\n        for (var i = 0; i < filmsURL.length; i++){\n            axios\n            .get(filmsURL[i])\n            .then(res => {\n                filmsArray.push(res.data.title);\n                this.setState({loading: false})\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        }\n        this.setState({films: filmsArray})\n    }\n\n    getHomeworld() {\n        const homeworldURL = this.props.peopleDetails.homeworld;\n        axios\n            .get(homeworldURL)\n            .then(res => {\n                this.setState({\n                    homeworld: res.data.name,\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    getSpecies() {\n        const speciesURL = this.props.peopleDetails.species;\n        axios\n            .get(speciesURL)\n            .then(res => {\n                this.setState({\n                    species: res.data.name,\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n     componentDidMount(){\n        this.getHomeworld();\n        this.getSpecies();\n        this.getFilms();\n        this.getVehicles();\n        this.getStarships();\n    }\n\n    render() {\n        const details = this.props.peopleDetails;\n\n        if (!this.state.expanded) {\n            return (\n            <div>\n                <button type=\"button\" className=\"btn btn-outline-info\" onClick={this.toggle} style={{float:'right'}}>Show Details</button>\n            </div>\n            )\n        }\n\n        else if (this.state.expanded && this.state.loading) {\n            return (\n            <div>\n            <button type=\"button\" className=\"btn btn-outline-info\" onClick={this.toggle} style={{float:'right'}}>Loading</button>\n            </div>\n            )\n        }\n\n        return (\n            <div>\n                <button type=\"button\" className=\"btn btn-outline-info\" onClick={this.toggle} style={{float:'right'}}>Hide Details</button>\n                <ul>\n                    <li>Height: {details.height} </li>\n                    <li>Mass: {details.mass}</li>\n                    <li>Hair Color: {details.hair_color}</li>\n                    <li>Skin Color: {details.skin_color}</li>\n                    <li>Eye Color: {details.eye_color}</li>\n                    <li>Birth Year: {details.birth_year}</li>\n                    <li>Gender: {details.gender} </li>\n                    <li>Homeworld: {this.state.homeworld} </li>\n                    <li>Films: {this.state.films.join(', ')} </li>\n                    <li>Species: {this.state.species} </li>\n                    <li>Vehicles: {this.state.vehicles.join(', ')} </li>\n                    <li>Starships: {this.state.starships.join(', ')} </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default PeopleDetails\n","import React, { Component } from 'react'\nimport PeopleDetails from './PeopleDetails'\n\nclass PeopleList extends Component {\n  render() {\n    const peopleList = this.props.data.map(item => {\n      return (\n        <div className=\"list-group\" key={item.id}>\n          <li className=\"list-group-item\">\n            <h5>{item.name}</h5>\n            <hr style={{ marginTop: '0', borderColor: \"#AAAAAA\", opacity: \"25%\" }} />\n            <PeopleDetails peopleDetails={item} />\n          </li>\n        </div>\n      )\n    })\n    return (peopleList)\n  }\n}\n\nexport default PeopleList\n","import React, { Component } from 'react'\n\nclass Pagination extends Component {\n    render() {\n        const buttons = []\n        for (let i = 1; i <= this.props.lastPage; i++) {\n            buttons.push(\n                <li key={i} className={\"page-item\" + (this.props.currentPage === i ? ' active' : '')}>\n                    <button className=\"page-link\" onClick={() => this.props.pageButtonClick(i)}>{i}</button>\n                </li>\n            )\n        }\n\n        return (\n            <div>\n                <ul className=\"pagination\" style={{ justifyContent: 'center', marginTop: '8px' }}> {buttons} </ul>\n            </div>\n        )\n    }\n}\n\nexport default Pagination\n","import React, { Component } from 'react'\nimport axios from 'axios'\n//css\nimport './App.css'\n//assets\nimport Logo from './assets/star-wars-logo.png'\nimport Loading from './assets/BB8-loading.gif'\nimport Yoda from './assets/baby-yoda.gif'\n// components\nimport PeopleList from './components/PeopleList'\nimport Pagination from './components/Pagination'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentPage: 1,\n      lastPage: 1, // actually depends on the api\n      data: [],\n      loading: false\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData(1)\n  }\n\n  fetchData = index => {\n    this.setState({ loading: true })\n    axios\n      .get('https://swapi.co/api/people?page=' + index)\n      .then(res => {\n        this.setState({\n          loading: false,\n          data: res.data.results,\n          lastPage: res.data.count / 10 + 1 // or something else\n        })\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  pageButtonClick = index => {\n    console.log('fetching ' + index + ' page')\n    this.fetchData(index)\n    this.setState({ currentPage: index })\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-3\" >\n        <img src={Logo} className=\"center\" alt=\"Logo\" />\n        <h3 style={{ textAlign: 'center', marginBottom: '0px' }}>Character Encyclopedia</h3>\n        <Pagination currentPage={this.state.currentPage} lastPage={this.state.lastPage} pageButtonClick={this.pageButtonClick}/>\n        {this.state.loading === true ? <img src={Loading} className=\"center\" alt=\"Loading...\" /> : <PeopleList data={this.state.data}/>}\n        <Pagination currentPage={this.state.currentPage} lastPage={this.state.lastPage} pageButtonClick={this.pageButtonClick}/>\n        <p style = {{textAlign: 'center'}}>  Created by: Jun Jia <img src={Yoda} style = {{width:\"8%\"}} alt=\":)\" /> </p>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}