{"version":3,"sources":["assets/star-wars-logo.png","assets/BB8-loading.gif","assets/baby-yoda.gif","components/PeopleDetails.js","components/PeopleList.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PeopleDetails","props","state","loading","expanded","homeworld","species","films","vehicles","starships","toggle","bind","this","setState","vehiclesArray","peopleDetails","forEach","URL","axios","get","then","res","push","data","name","catch","err","console","log","starshipsArray","filmsArray","title","homeworldURL","speciesURL","getHomeworld","getSpecies","getFilms","getVehicles","getStarships","details","type","className","onClick","style","float","height","mass","hair_color","skin_color","eye_color","birth_year","gender","join","Component","PeopleList","map","item","key","id","marginTop","borderColor","opacity","Pagination","buttons","i","currentPage","pageButtonClick","lastPage","justifyContent","App","fetchData","index","results","count","src","Logo","alt","textAlign","marginBottom","Loading","Yoda","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce4fb5cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.0cf7e1d8.png\";","module.exports = __webpack_public_path__ + \"static/media/BB8-loading.d0bf0146.gif\";","module.exports = __webpack_public_path__ + \"static/media/baby-yoda.70528013.gif\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass PeopleDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      expanded: false,\n      homeworld: null,\n      species: null,\n      films: [],\n      vehicles: [],\n      starships: []\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ expanded: !this.state.expanded });\n  }\n\n  getVehicles() {\n    var vehiclesArray = [];\n    const vehiclesURL = this.props.peopleDetails.vehicles;\n    vehiclesURL.forEach(URL =>\n      axios\n        .get(URL)\n        .then(res => {\n          vehiclesArray.push(res.data.name);\n        })\n        .catch(err => {\n          console.log(err);\n        })\n    );\n    this.setState({ vehicles: vehiclesArray });\n  }\n\n  getStarships() {\n    var starshipsArray = [];\n    const starshipsURL = this.props.peopleDetails.starships;\n    starshipsURL.forEach(URL =>\n      axios\n        .get(URL)\n        .then(res => {\n          starshipsArray.push(res.data.name);\n        })\n        .catch(err => {\n          console.log(err);\n        })\n    );\n    this.setState({ starships: starshipsArray });\n  }\n\n  getFilms() {\n    var filmsArray = [];\n    const filmsURL = this.props.peopleDetails.films;\n    filmsURL.forEach(URL =>\n      axios\n        .get(URL)\n        .then(res => {\n          filmsArray.push(res.data.title);\n          this.setState({ loading: false });\n        })\n        .catch(err => {\n          console.log(err);\n        })\n    );\n    this.setState({ films: filmsArray });\n  }\n\n  getHomeworld() {\n    const homeworldURL = this.props.peopleDetails.homeworld;\n    axios\n      .get(homeworldURL)\n      .then(res => {\n        this.setState({\n          homeworld: res.data.name\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  getSpecies() {\n    const speciesURL = this.props.peopleDetails.species;\n    axios\n      .get(speciesURL)\n      .then(res => {\n        this.setState({\n          species: res.data.name\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  componentDidMount() {\n    this.getHomeworld();\n    this.getSpecies();\n    this.getFilms();\n    this.getVehicles();\n    this.getStarships();\n  }\n\n  render() {\n    const details = this.props.peopleDetails;\n\n    if (!this.state.expanded) {\n      return (\n        <div>\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-info\"\n            onClick={this.toggle}\n            style={{ float: \"right\" }}\n          >\n            Show Details\n          </button>\n        </div>\n      );\n    } else if (this.state.expanded && this.state.loading) {\n      return (\n        <div>\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-info\"\n            onClick={this.toggle}\n            style={{ float: \"right\" }}\n          >\n            Loading\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-info\"\n          onClick={this.toggle}\n          style={{ float: \"right\" }}\n        >\n          Hide Details\n        </button>\n        <ul>\n          <li>Height: {details.height}</li>\n          <li>Mass: {details.mass}</li>\n          <li>Hair Color: {details.hair_color}</li>\n          <li>Skin Color: {details.skin_color}</li>\n          <li>Eye Color: {details.eye_color}</li>\n          <li>Birth Year: {details.birth_year}</li>\n          <li>Gender: {details.gender}</li>\n          <li>Homeworld: {this.state.homeworld}</li>\n          <li>Films: {this.state.films.join(\", \")}</li>\n          <li>Species: {this.state.species} </li>\n          <li>Vehicles: {this.state.vehicles.join(\", \")}</li>\n          <li>Starships: {this.state.starships.join(\", \")}</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default PeopleDetails;\n","import React, { Component } from \"react\";\nimport PeopleDetails from \"./PeopleDetails\";\n\nclass PeopleList extends Component {\n  render() {\n    const peopleList = this.props.data.map(item => {\n      return (\n        <div className=\"list-group\" key={item.id}>\n          <li className=\"list-group-item\">\n            <h5>{item.name}</h5>\n            <hr\n              style={{ marginTop: \"0\", borderColor: \"#AAAAAA\", opacity: \"25%\" }}\n            />\n            <PeopleDetails peopleDetails={item} />\n          </li>\n        </div>\n      );\n    });\n    return peopleList;\n  }\n}\n\nexport default PeopleList;\n","import React, { Component } from \"react\";\n\nclass Pagination extends Component {\n  render() {\n    const buttons = [];\n    for (let i = 1; i <= this.props.lastPage; i++) {\n      buttons.push(\n        <li\n          key={i}\n          className={\n            \"page-item\" + (this.props.currentPage === i ? \" active\" : \"\")\n          }\n        >\n          <button\n            className=\"page-link\"\n            onClick={() => this.props.pageButtonClick(i)}\n          >\n            {i}\n          </button>\n        </li>\n      );\n    }\n\n    return (\n      <div>\n        <ul\n          className=\"pagination\"\n          style={{ justifyContent: \"center\", marginTop: \"8px\" }}\n        >\n          {\" \"}\n          {buttons}{\" \"}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Pagination;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n//css\nimport \"./App.css\";\n//assets\nimport Logo from \"./assets/star-wars-logo.png\";\nimport Loading from \"./assets/BB8-loading.gif\";\nimport Yoda from \"./assets/baby-yoda.gif\";\n// components\nimport PeopleList from \"./components/PeopleList\";\nimport Pagination from \"./components/Pagination\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n      lastPage: 1, // actually depends on the api\n      data: [],\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData(1);\n  }\n\n  fetchData = index => {\n    this.setState({ loading: true });\n    axios\n      .get(\"https://swapi.dev/api/people?page=\" + index)\n      .then(res => {\n        this.setState({\n          loading: false,\n          data: res.data.results,\n          lastPage: res.data.count / 10 + 1 // or something else\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  pageButtonClick = index => {\n    this.fetchData(index);\n    this.setState({ currentPage: index });\n  };\n\n  render() {\n    return (\n      <div className=\"container mt-3\">\n        <img src={Logo} className=\"center\" alt=\"Logo\" />\n        <h3 style={{ textAlign: \"center\", marginBottom: \"0px\" }}>\n          Character Encyclopedia\n        </h3>\n        <Pagination\n          currentPage={this.state.currentPage}\n          lastPage={this.state.lastPage}\n          pageButtonClick={this.pageButtonClick}\n        />\n        {this.state.loading === true ? (\n          <img src={Loading} className=\"center\" alt=\"Loading...\" />\n        ) : (\n          <PeopleList data={this.state.data} />\n        )}\n        <Pagination\n          currentPage={this.state.currentPage}\n          lastPage={this.state.lastPage}\n          pageButtonClick={this.pageButtonClick}\n        />\n        <p style={{ textAlign: \"center\" }}>\n          {\" \"}\n          Created by: Jun Jia{\" \"}\n          <img src={Yoda} style={{ width: \"8%\" }} alt=\":)\" />{\" \"}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}